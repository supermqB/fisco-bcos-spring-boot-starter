package com.lrhealth.bcos.blockchainlogger.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class BCOSLogger extends Contract {
    public static final String[] BINARY_ARRAY = {"","0190611381565b604051908082528060200260200182016040528015610d3557816020015b6060815260200190600190039081610d205790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dd49190810190611381565b604051908082528060200260200182016040528015610e0757816020015b6060815260200190600190039081610df25790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e7357600080fd5b505af1158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eab9190810190611381565b8212156111b5578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f079190611736565b602060405180830381600087803b158015610f2157600080fd5b505af1158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f59919081019061132f565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fae906117ee565b600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061100591908101906113eb565b858381518110151561101357fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107390611898565b600060405180830381600087803b15801561108d57600080fd5b505af11580156110a1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110ca91908101906113eb565b84838151811015156110d857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161113890611843565b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061118f91908101906113eb565b838381518110151561119d57fe5b90602001906020020181905250816001019150610e0f565b8484849a509a509a5050505050505050509193909250565b60006111d982516119ab565b905092915050565b60006111ed82516119bd565b905092915050565b600061120182516119cf565b905092915050565b600061121582516119e1565b905092915050565b600061122982516119f3565b905092915050565b600082601f830112151561124457600080fd5b81356112576112528261191a565b6118ed565b9150808252602083016020830185838301111561127357600080fd5b61127e838284611a33565b50505092915050565b600082601f830112151561129a57600080fd5b81516112ad6112a88261191a565b6118ed565b915080825260208301602083018583830111156112c957600080fd5b6112d4838284611a42565b50505092915050565b6000602082840312156112ef57600080fd5b60006112fd848285016111cd565b91505092915050565b60006020828403121561131857600080fd5b6000611326848285016111e1565b91505092915050565b60006020828403121561134157600080fd5b600061134f848285016111f5565b91505092915050565b60006020828403121561136a57600080fd5b600061137884828501611209565b91505092915050565b60006020828403121561139357600080fd5b60006113a18482850161121d565b91505092915050565b6000602082840312156113bc57600080fd5b600082013567ffffffffffffffff8111156113d657600080fd5b6113e284828501611231565b91505092915050565b6000602082840312156113fd57600080fd5b600082015167ffffffffffffffff81111561141757600080fd5b61142384828501611287565b91505092915050565b6000806040838503121561143f57600080fd5b600083013567ffffffffffffffff81111561145957600080fd5b61146585828601611231565b925050602083013567ffffffffffffffff81111561148257600080fd5b61148e85828601611231565b9150509250929050565b6000806000606084860312156114ad57600080fd5b600084013567ffffffffffffffff8111156114c757600080fd5b6114d386828701611231565b935050602084013567ffffffffffffffff8111156114f057600080fd5b6114fc86828701611231565b925050604084013567ffffffffffffffff81111561151957600080fd5b61152586828701611231565b9150509250925092565b600061153a82611953565b8084526020840193508360208202850161155385611946565b60005b8481101561158c57838303885261156e83835161160f565b925061157982611974565b9150602088019750600181019050611556565b508196508694505050505092915050565b6115a6816119fd565b82525050565b6115b581611a0f565b82525050565b6115c4816119a1565b82525050565b6115d381611a21565b82525050565b60006115e482611969565b8084526115f8816020860160208601611a42565b61160181611a75565b602085010191505092915050565b600061161a8261195e565b80845261162e816020860160208601611a42565b61163781611a75565b602085010191505092915050565b6000600682527f6c6f675f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f666f6f747072696e7400000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611704818661152f565b90508181036020830152611718818561152f565b9050818103604083015261172c818461152f565b9050949350505050565b600060208201905061174b60008301846115bb565b92915050565b600060208201905061176660008301846115ca565b92915050565b60006020820190508181036000830152611786818461160f565b905092915050565b600060408201905081810360008301526117a881856115d9565b90506117b7602083018461159d565b9392505050565b600060408201905081810360008301526117d881856115d9565b90506117e760208301846115ac565b9392505050565b6000602082019050818103600083015261180781611645565b9050919050565b6000604082019050818103600083015261182781611645565b9050818103602083015261183b81846115d9565b905092915050565b6000602082019050818103600083015261185c8161167c565b9050919050565b6000604082019050818103600083015261187c8161167c565b9050818103602083015261189081846115d9565b905092915050565b600060208201905081810360008301526118b1816116b3565b9050919050565b600060408201905081810360008301526118d1816116b3565b905081810360208301526118e581846115d9565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561191057600080fd5b8060405250919050565b600067ffffffffffffffff82111561193157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006119b682611981565b9050919050565b60006119c882611981565b9050919050565b60006119da82611981565b9050919050565b60006119ec82611981565b9050919050565b6000819050919050565b6000611a0882611981565b9050919050565b6000611a1a82611981565b9050919050565b6000611a2c826119a1565b9050919050565b82818337600083830152505050565b60005b83811015611a60578082015181840152602081019050611a45565b83811115611a6f576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820fee3799a8070d4e4f9ee077ef2082ebe309387848d389030edf7dfe5c96dbd096c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0190611381565b604051908082528060200260200182016040528015610d3557816020015b6060815260200190600190039081610d205790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dd49190810190611381565b604051908082528060200260200182016040528015610e0757816020015b6060815260200190600190039081610df25790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e7357600080fd5b505af1158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eab9190810190611381565b8212156111b5578573ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f079190611736565b602060405180830381600087803b158015610f2157600080fd5b505af1158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f59919081019061132f565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fae90611843565b600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061100591908101906113eb565b858381518110151561101357fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107390611898565b600060405180830381600087803b15801561108d57600080fd5b505af11580156110a1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110ca91908101906113eb565b84838151811015156110d857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611138906117ee565b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061118f91908101906113eb565b838381518110151561119d57fe5b90602001906020020181905250816001019150610e0f565b8484849a509a509a5050505050505050509193909250565b60006111d982516119ab565b905092915050565b60006111ed82516119bd565b905092915050565b600061120182516119cf565b905092915050565b600061121582516119e1565b905092915050565b600061122982516119f3565b905092915050565b600082601f830112151561124457600080fd5b81356112576112528261191a565b6118ed565b9150808252602083016020830185838301111561127357600080fd5b61127e838284611a33565b50505092915050565b600082601f830112151561129a57600080fd5b81516112ad6112a88261191a565b6118ed565b915080825260208301602083018583830111156112c957600080fd5b6112d4838284611a42565b50505092915050565b6000602082840312156112ef57600080fd5b60006112fd848285016111cd565b91505092915050565b60006020828403121561131857600080fd5b6000611326848285016111e1565b91505092915050565b60006020828403121561134157600080fd5b600061134f848285016111f5565b91505092915050565b60006020828403121561136a57600080fd5b600061137884828501611209565b91505092915050565b60006020828403121561139357600080fd5b60006113a18482850161121d565b91505092915050565b6000602082840312156113bc57600080fd5b600082013567ffffffffffffffff8111156113d657600080fd5b6113e284828501611231565b91505092915050565b6000602082840312156113fd57600080fd5b600082015167ffffffffffffffff81111561141757600080fd5b61142384828501611287565b91505092915050565b6000806040838503121561143f57600080fd5b600083013567ffffffffffffffff81111561145957600080fd5b61146585828601611231565b925050602083013567ffffffffffffffff81111561148257600080fd5b61148e85828601611231565b9150509250929050565b6000806000606084860312156114ad57600080fd5b600084013567ffffffffffffffff8111156114c757600080fd5b6114d386828701611231565b935050602084013567ffffffffffffffff8111156114f057600080fd5b6114fc86828701611231565b925050604084013567ffffffffffffffff81111561151957600080fd5b61152586828701611231565b9150509250925092565b600061153a82611953565b8084526020840193508360208202850161155385611946565b60005b8481101561158c57838303885261156e83835161160f565b925061157982611974565b9150602088019750600181019050611556565b508196508694505050505092915050565b6115a6816119fd565b82525050565b6115b581611a0f565b82525050565b6115c4816119a1565b82525050565b6115d381611a21565b82525050565b60006115e482611969565b8084526115f8816020860160208601611a42565b61160181611a75565b602085010191505092915050565b600061161a8261195e565b80845261162e816020860160208601611a42565b61163781611a75565b602085010191505092915050565b6000600982527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6c6f675f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f666f6f747072696e7400000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611704818661152f565b90508181036020830152611718818561152f565b9050818103604083015261172c818461152f565b9050949350505050565b600060208201905061174b60008301846115bb565b92915050565b600060208201905061176660008301846115ca565b92915050565b60006020820190508181036000830152611786818461160f565b905092915050565b600060408201905081810360008301526117a881856115d9565b90506117b7602083018461159d565b9392505050565b600060408201905081810360008301526117d881856115d9565b90506117e760208301846115ac565b9392505050565b6000602082019050818103600083015261180781611645565b9050919050565b6000604082019050818103600083015261182781611645565b9050818103602083015261183b81846115d9565b905092915050565b6000602082019050818103600083015261185c8161167c565b9050919050565b6000604082019050818103600083015261187c8161167c565b9050818103602083015261189081846115d9565b905092915050565b600060208201905081810360008301526118b1816116b3565b9050919050565b600060408201905081810360008301526118d1816116b3565b905081810360208301526118e581846115d9565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561191057600080fd5b8060405250919050565b600067ffffffffffffffff82111561193157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006119b682611981565b9050919050565b60006119c882611981565b9050919050565b60006119da82611981565b9050919050565b60006119ec82611981565b9050919050565b6000819050919050565b6000611a0882611981565b9050919050565b6000611a1a82611981565b9050919050565b6000611a2c826119a1565b9050919050565b82818337600083830152505050565b60005b83811015611a60578082015181840152602081019050611a45565b83811115611a6f576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582033bdc34091cbe22b856d5788be106a53fb27febb61d2089d51568defc12262e76c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"log_id\",\"type\":\"string\"},{\"name\":\"footprint\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"log_id\",\"type\":\"string\"},{\"name\":\"footprint\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"log_id\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_QUERY = "query";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected BCOSLogger(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(String log_id, String footprint, String signature) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String log_id, String footprint, String signature, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(signature)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String log_id, String footprint, String signature) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String log_id, String footprint) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String log_id, String footprint, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String log_id, String footprint) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(footprint)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> query(String log_id) throws ContractException {
        final Function function = new Function(FUNC_QUERY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(log_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static BCOSLogger load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new BCOSLogger(contractAddress, client, credential);
    }

    public static BCOSLogger deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(BCOSLogger.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
